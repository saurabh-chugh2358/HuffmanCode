package sorting.LinearSort;

public class LinearSort {
	public int[] linearArray = {4,2,5,1,3,6};
	private long[] data;
	private int maxSize;
	private int len;
	
	
	public int getMaxSize() {
		return maxSize;
	}

	public void setMaxSize(int maxSize) {
		this.maxSize = maxSize;
	}

	public void insertionSort(int A[], int n){
		int i, j, v;
		for (i=1; i<n; i++){
			v = A[i];
			j = i;
			while (j>=1 && A[j-1]>v) {
				A[j] = A[j-1];
				j--;
			}
			A[j] = v;
		}
	}
	
	public void shellSort() {
		
        int inner, outer;
        long temp;
        
        initializeData();
        
        //find initial value of h
        int h = 1;
        while (h <= len / 3)
          h = h * 3 + 1; // (1, 4, 13, 40, 121, ...)

        while (h > 0) // decreasing h, until h=1
        {
          // h-sort the file
          for (outer = h; outer < len; outer++) {
            temp = data[outer];
            inner = outer;
            // one subpass (eg 0, 4, 8)
            while (inner > h - 1 && data[inner - h] >= temp) {
              data[inner] = data[inner - h];
              inner -= h;
            }
            data[inner] = temp;
          }
          h = (h - 1) / 3; // decrease h
        }
      }
	
	public void initializeData(){
		data = new long[maxSize];
		len =0;
		
		for (int i = 0; i < maxSize; i++) {
			data[i] = (int)(Math.random()*maxSize);
			len++;
		}
		
		arrDisplay(data, len);
	}
	
	public void arrDisplay(long[] arr, int length){
		System.out.print("Data: ");
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
		System.out.print(" ");
	}
}
